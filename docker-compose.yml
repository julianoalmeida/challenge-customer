version: '3.5'

services:
  #  challenge-api:
  #    image: local.docker/challenge_customer_api
  #    container_name: challenge_customer_api
  #    ports:
  #      - "8080:8080"
  #    restart: always
  #    depends_on:
  #      - postgres
  #      - rabbitmq
  #    networks:
  #      - backend
  #    environment:
  #      SPRING_PROFILES_ACTIVE: default
  #    stdin_open: true
  #    tty: true
  #
  #  challenge-consumer:
  #    image: local.docker/challenge_customer_consumer
  #    container_name: challenge_customer_consumer
  #    ports:
  #      - "8081:8081"
  #    restart: always
  #    depends_on:
  #      - postgres
  #      - rabbitmq
  #    networks:
  #      - backend
  #    environment:
  #      SPRING_PROFILES_ACTIVE: default
  #    stdin_open: true
  #    tty: true

  postgres:
    container_name: customer_postgres
    build:
      context: ./docker/postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - backend
    #    network_mode: bridge
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq1
    hostname: rabbitmq1
    volumes:
      - ${DATA_PATH_HOST}/rabbitmq/logs:/var/log/rabbitmq/log
      - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - backend
    #    network_mode: bridge
    environment:
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  postgres:
    driver: ${VOLUMES_DRIVER}